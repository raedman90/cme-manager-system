generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventSource {
  DB
  LEDGER
}

// enums novos
enum WashMethod {
  MANUAL
  ULTRASSONICA
  TERMO_DESINFECCAO
}

enum DisinfectionAgent {
  PERACETICO
  HIPOCLORITO
  OPA
  QUATERNARIO
  ALCOOL70
  OUTRO
}

enum Disinfectant {
  PERACETICO
  HIPOCLORITO
  OPA
  QUATERNARIO
  ALCOOL70
  OUTRO
}

enum SterMethod {
  STEAM_134
  STEAM_121
  H2O2
  ETO
  OUTRO
}

enum TestResult {
  PASS
  FAIL
  NA
}

enum ShelfPolicy {
  TIME
  EVENT
}

model StageEvent {
  id          String      @id @default(uuid())
  materialId  String
  cycleId     String
  stage       String // "RECEBIMENTO" | "LAVAGEM" | ...
  occurredAt  DateTime // horário vindo do LEDGER, quando disponível
  recordedAt  DateTime    @default(now()) // horário do servidor
  operatorId  String? // X.509 (clientIdentity.getID())
  operatorMSP String? // Org1MSP/Org2MSP
  source      EventSource
  ledgerTxId  String?     @unique
  ledgerBlock BigInt? // do commit status
  batchId     String?
  notes       String?
  meta        Json? // <- detalhes da etapa

  // relacionamentos (ajuste os names das tabelas se diferirem)
  Material      Material            @relation(fields: [materialId], references: [id])
  Cycle         Cycle               @relation(fields: [cycleId], references: [id])
  wash          WashEvent?          @relation("StageEvent_Wash")
  disinfection  DisinfectionEvent?  @relation("StageEvent_Disinfection")
  sterilization SterilizationEvent? @relation("StageEvent_Sterilization")
  storage       StorageEvent?       @relation("StageEvent_Storage")

  @@index([materialId, occurredAt])
  @@index([cycleId, occurredAt])
}

model WashEvent {
  id           String     @id @default(cuid())
  stageEventId String     @unique
  stageEvent   StageEvent @relation("StageEvent_Wash", fields: [stageEventId], references: [id], onDelete: Cascade)
  method       WashMethod
  detergent    String?
  timeMin      Int?
  tempC        Float?
  createdAt    DateTime   @default(now())
}

model DisinfectionEvent {
  id              String            @id @default(cuid())
  stageEventId    String            @unique
  stageEvent      StageEvent        @relation("StageEvent_Disinfection", fields: [stageEventId], references: [id], onDelete: Cascade)
  agent           DisinfectionAgent
  concentration   String?
  contactMin      Int
  solutionLotId   String?
  testStripLot    String?
  testStripResult TestResult?
  measuredTempC   Float?
  ph              Float?
  activationTime  String?           // "HH:mm"
  activationLevel DisinfectionActivationLevel?
  testStripExpiry DateTime?         // validade da fita
  createdAt       DateTime          @default(now())
}

enum DisinfectionActivationLevel {
  ATIVO_2
  ATIVO_1
  INATIVO
  NAO_REALIZADO
}

model SterilizationEvent {
  id           String      @id @default(cuid())
  stageEventId String      @unique
  stageEvent   StageEvent  @relation("StageEvent_Sterilization", fields: [stageEventId], references: [id], onDelete: Cascade)
  method       SterMethod
  autoclaveId  String?
  program      String?
  exposureMin  Int?
  tempC        Float?
  ci           TestResult?
  bi           TestResult?
  loadId       String?
  createdAt    DateTime    @default(now())
}

model StorageEvent {
  id           String       @id @default(cuid())
  stageEventId String       @unique
  stageEvent   StageEvent   @relation("StageEvent_Storage", fields: [stageEventId], references: [id], onDelete: Cascade)
  location     String?
  shelfPolicy  ShelfPolicy?
  expiresAt    DateTime?
  integrityOk  Boolean?
  createdAt    DateTime     @default(now())
  @@index([expiresAt])
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  badgeCode String   @unique
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  ADMIN
  TECH
  AUDITOR
}

enum Etapa {
  RECEBIMENTO
  LAVAGEM
  DESINFECCAO
  ESTERILIZACAO
  ARMAZENAMENTO
}

model Lote {
  id           String   @id @default(uuid())
  numero       String   @unique // código/identificador impresso (QR/Code128)
  nome         String?
  etapa        Etapa    @default(ESTERILIZACAO)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt

  materiais Material[] @relation("LoteMateriais")

  // ← LADO OPOSTO da relação com Cycle (1 lote tem muitos cycles)
  cycles Cycle[] @relation("LoteCycles")
}

model Material {
  id           String   @id @default(uuid())
  nome         String
  categoria    String
  tipo         String
  validade     DateTime
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // ↓↓↓ repostos para o front/usecases
  codigo    String? @db.VarChar(64) // se tiver certeza que é único, pode usar @unique
  descricao String?
  ativo     Boolean @default(true)

  // NOVO:
  reprocessamentos Int @default(0)

  loteId String?
  lote   Lote?   @relation("LoteMateriais", fields: [loteId], references: [id])
  cycles Cycle[]

  StageEvent StageEvent[]
}

model Cycle {
  id          String   @id @default(uuid())
  materialId  String
  etapa       String // mantém uppercase vindo do DTO por enquanto
  responsavel String
  observacoes String?
  timestamp   DateTime @default(now())
  ledgerHash  String?

  // FK para o Lote (opcional) + lado da relação
  loteId String?
  lote   Lote?   @relation("LoteCycles", fields: [loteId], references: [id], onDelete: SetNull)

  material   Material     @relation(fields: [materialId], references: [id], onDelete: Cascade)
  StageEvent StageEvent[]

  @@index([loteId])
}

model ChemicalLot {
  id            String       @id @default(uuid())
  type          Disinfectant
  lotCode       String
  openedAt      DateTime?
  expiryAt      DateTime?
  concentration String? // ex: "0,2%" ou ppm
  notes         String?

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ---------------------- ALERTAS ----------------------
model Alert {
  id          String        @id @default(cuid())
  key         String        @unique   // deduplicação (ex.: "DISINFECTION_FAIL:cycleId:stageEventId")
  kind        AlertKind
  severity    AlertSeverity
  status      AlertStatus   @default(OPEN)
  title       String
  message     String?
  cycleId     String?
  materialId  String?
  stageEventId String?
  stage       String?
  dueAt       DateTime?
  data        Json?
  ackedBy     String?
  ackedAt     DateTime?
  resolvedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comments    AlertComment[]

  @@index([status, severity, createdAt])
  @@index([cycleId])
  @@index([stageEventId])
}

enum AlertKind {
  DISINFECTION_FAIL
  STERILIZATION_FAIL
  STORAGE_EXPIRES_SOON
  STORAGE_EXPIRED
  READINESS_BLOCK
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
}

enum AlertStatus {
  OPEN
  ACKED
  RESOLVED
}

model AlertComment {
  id        String   @id @default(cuid())
  alertId   String
  alert     Alert    @relation(fields: [alertId], references: [id], onDelete: Cascade)
  author    String?
  text      String
  createdAt DateTime @default(now())

  @@index([alertId, createdAt])
}